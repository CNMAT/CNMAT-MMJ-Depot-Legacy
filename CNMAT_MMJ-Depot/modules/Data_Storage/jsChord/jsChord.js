/*Visual feedback for notes and chords*/outlets = 1;sketch.default2d();var mybrgb = [1,1,1];var myfrgb = [0,0,0];var myrgb2 = [1,1,1];var myfont = "Sonora";var notes = new Array();var noteSpace = 0.25;var microTone = 1;var accidents = 0;draw();function draw(){	var str,width,height,aspect;	height = box.rect[3] - box.rect[1]; 	width = box.rect[2] - box.rect[0]; 	aspect = width/height;			with (sketch) {		//erase background		glclearcolor(1,1,1);		glclear();				drawslider();			drawstaff(0, "&");		drawstaff(-.29, "?");		drawstaff(-.625, "t");		drawstaff(.34, "&");		xpos = -.7		drawnotes();	}}function list(){	notes.length = 0;	for ( i=0 ; i < arguments.length ; i++)	{		notes[i] = arguments [i];	}	bang();}function drawstaff(xpos, clef){	var str,width,height,aspect;	height = box.rect[3] - box.rect[1]; 	width = box.rect[2] - box.rect[0]; 	aspect = width/height;			with (sketch) {				glcolor(0,0,0);		newX = 1. * aspect		moveto(0,0);		for(i=0;i<5;i++)		{			newY = (i * 0.05) + xpos;			linesegment(-newX, newY, 0.,  newX, newY, 0.);		}		glcolor(0.,0.,0.);		switch(clef){			case "&":			xpos = xpos+.06;			break;			case "?":			xpos = xpos+.165;			break;			case "t":			xpos = xpos+.165;			break;		}		moveto((-newX+.1), xpos);		font(myfont);				fontsize(.145*height);		textalign("center","center");			text(clef);	}}function drawnotes(){	var str,width,height,aspect;	height = box.rect[3] - box.rect[1]; 	width = box.rect[2] - box.rect[0]; 	aspect = width/height;	          newX = 1. * aspect	if (notes.length > 0)	{	 for (i=0 ; i < notes.length ; i++)		{		currentNote = notes[i];		currentNote = parseInt(currentNote);		pitchClass = currentNote%12;		sharp = 0;		ledger = 0;		switch(pitchClass)		{			case 1:			currentNote = currentNote-1;			sharp = 1;			break;			case 3:			currentNote = currentNote-1;			sharp = 1;			break;			case 4:			currentNote = currentNote-0.5;			break;			case 6:			currentNote = currentNote-1;			sharp = 1;			break;			case 8:			currentNote = currentNote-1;			sharp = 1;			break;			case 10:			currentNote = currentNote-1;			sharp = 1;			break;			case 11:			currentNote = currentNote-0.5;			break;		}				switch(currentNote)		{			case 60:			ledger = 1;			break;			case 36:			ledger = -1			break;			case 38:			ledger = -1			break;			case 39.5:			ledger = -2			break;			case 81:			ledger = 2			break;			case 83:			ledger = 2			break;			case 84:			ledger = 3			break;			case 86:			ledger = 3			break;		}		//for mocrotones		fracTone = notes[i]%1;		post("frac",fracTone);		post();		switch (microTone){		case 1:			if (fracTone < .75 && fracTone > .25)			{			sharp = sharp+0.5;			}		break;		case 3:			if (fracTone > .125 && fracTone < .375)			{			sharp = sharp+0.25;			}			else if (fracTone > .375 && fracTone < .625)			{			sharp = sharp+0.5;			}			else if (fracTone > .625 && fracTone <1.)			{			sharp = sharp+0.75			}			post("sharp",sharp);			post();		break;		}		ypos = ((currentNote-60)*.014)-.033;		xpos = -newX+0.3;		with (sketch) {			moveto(xpos, ypos);			font(myfont);			fontsize(.15*height);			textalign("center","center");				text("Ï");			font("Tempera");			fontsize(.09*height);			switch(sharp)			{					case .25:				moveto (xpos-.1, ypos)				text("V");				break;					case .5:				moveto (xpos-.1, ypos)				text("]");				break;					case .75:				moveto (xpos-.1, ypos)				text("`");				break;					case 1:				moveto (xpos-.1, ypos)				text("g");				break;					case 1.25:				moveto (xpos-.1, ypos)				text("h");				break;					case 1.5:				moveto (xpos-.1, ypos)				text("q");				break;					case 1.75:				moveto (xpos-.1, ypos)				text("s");				break;				}							switch(ledger)			{				case 1:				linesegment(xpos+.03, -.05, 0., xpos-.07, -.05, 0.);				break;					case -1:				linesegment(xpos+.03, -.385, 0., xpos-.07, -.385, 0.);				break;					case -2:				linesegment(xpos+.03, -.335, 0., xpos-.07, -.335, 0.);				linesegment(xpos+.03, -.385, 0., xpos-.07, -.385, 0.);				break;					case 2:				linesegment(xpos+.03, .25, 0., xpos-.07, .25, 0.);				break;					case 3:				linesegment(xpos+.03, .25, 0., xpos-.07, .25, 0.);				linesegment(xpos+.03, .29, 0., xpos-.07, .29, 0.);				break;				}			newX = newX-noteSpace;			}		}	}}function drawslider() {	var str,width,height,aspect;	height = box.rect[3] - box.rect[1]; 	width = box.rect[2] - box.rect[0]; 	aspect = width/height;	with (sketch) {		glcolor(0.5, 0.5, 0.5);		shapeslice(1,1);		moveto(0,-.9);		plane((0.9*aspect),0.01);		glcolor(0., 0., 0.);		shapeslice(1,1);		markPos = (-0.9*aspect)+(2*noteSpace);					moveto(markPos,-.87);			plane(0.03,0.03,0.,0.03); //triangle					}}function space(s){	noteSpace = s;	bang();}function accidentals(a){	accidents = a;	bang();}function micromode(m){	microTone = m;	bang();}function bang(){	draw();	refresh();	outlet(0,notes);}function onresize(w,h){	draw();	refresh();}onresize.local = 1; //privatefunction onclick(){	bang();}onclick.local = 1; //privatefunction ondrag(x,y,but,cmd,shift,capslock,option,ctrl){	var dragX;	drag = sketch.screentoworld(x,y);	if (drag[1]<-0.8){	 	noteSpace = (drag[0]+1.)/2.		}	if (noteSpace < 0.){		noteSpace = 0.;		}	if (noteSpace > .8){		noteSpace = .8;		}	draw();	refresh();}ondrag.local = 1;